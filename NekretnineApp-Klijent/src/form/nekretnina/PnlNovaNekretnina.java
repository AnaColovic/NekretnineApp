/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.nekretnina;

import kontroler.Kontroler;
import domain.Grad;
import domain.Nekretnina;
import domain.NekretninaZaIzdavanje;
import domain.NekretninaZaProdaju;
import domain.OpstaDomenskaKlasa;
import domain.StatusNekretnine;
import domain.TipNekretnine;
import domain.Vlasnik;
import form.FrmDialog;
import form.FrmForma;
import form.IPanel;
import form.PanelModeEnum;
import form.vlasnik.PnlUnosVlasnika;
import java.awt.Frame;
import java.math.BigDecimal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Administrator
 */
public class PnlNovaNekretnina extends javax.swing.JPanel implements IPanel {

    PanelModeEnum mode;
    boolean izdavanje;

    /**
     * Creates new form PnlNovaNekretnina
     */
    public PnlNovaNekretnina(PanelModeEnum mode, boolean izdavanje) {
        initComponents();
        this.mode = mode;
        this.izdavanje = izdavanje;
        popuniComboGradovi();
        popuniComboTipoviNekretnina();
        popuniComboVlasnici();
        popuniComboStatusi();
        postaviNekretninuZaIzdavanje(izdavanje);
        dekorisiPanel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pblCharacteristics = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtFloor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRooms = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        btnEdit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtAdress = new javax.swing.JTextField();
        rbRent = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        cmbOwner = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        cmbCity = new javax.swing.JComboBox<>();
        rbSell = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnNewOwner = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        chRegistered = new javax.swing.JCheckBox();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnUnos = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Nekretnina"));

        pblCharacteristics.setBorder(javax.swing.BorderFactory.createTitledBorder("Osnovne karakteristike"));

        jLabel6.setText("Tip:");

        jLabel5.setText("Sprat:");

        jLabel7.setText("Povrsina (m2):");

        jLabel8.setText("Broj soba:");

        jLabel9.setText("Opis:");

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        jScrollPane1.setViewportView(txtDesc);

        javax.swing.GroupLayout pblCharacteristicsLayout = new javax.swing.GroupLayout(pblCharacteristics);
        pblCharacteristics.setLayout(pblCharacteristicsLayout);
        pblCharacteristicsLayout.setHorizontalGroup(
            pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblCharacteristicsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pblCharacteristicsLayout.createSequentialGroup()
                        .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)
                            .addComponent(txtFloor)
                            .addComponent(txtRooms, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)))
                    .addGroup(pblCharacteristicsLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        pblCharacteristicsLayout.setVerticalGroup(
            pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblCharacteristicsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFloor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pblCharacteristicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnEdit.setText("Izmeni");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jLabel2.setText("Adresa:");

        buttonGroup1.add(rbRent);
        rbRent.setText("Nekretnina za izdavanje");
        rbRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRentActionPerformed(evt);
            }
        });

        jLabel4.setText("Grad:");

        jLabel1.setText("ID Nekretnine:");

        txtID.setEditable(false);

        buttonGroup1.add(rbSell);
        rbSell.setText("Nekretnina za prodaju");
        rbSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSellActionPerformed(evt);
            }
        });

        jLabel3.setText("Vlasnik:");

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnNewOwner.setText("Novi vlasnik");
        btnNewOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewOwnerActionPerformed(evt);
            }
        });

        btnCancel.setText("Otkazi");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        chRegistered.setText("Uknjizen");

        lblPrice.setText("Mesecna kirija:");

        btnUnos.setText("Novi unos");
        btnUnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnosActionPerformed(evt);
            }
        });

        jLabel10.setText("Status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUnos)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(rbRent)
                                .addComponent(rbSell)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(lblPrice))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnNewOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(chRegistered))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pblCharacteristics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbRent)
                    .addComponent(jLabel10)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSell)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNewOwner)))
                        .addGap(11, 11, 11)
                        .addComponent(chRegistered)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrice)))
                    .addComponent(pblCharacteristics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnEdit)
                        .addComponent(btnUnos))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRentActionPerformed
        postaviNekretninuZaIzdavanje(true);
        izdavanje = true;
    }//GEN-LAST:event_rbRentActionPerformed

    private void rbSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSellActionPerformed
        postaviNekretninuZaIzdavanje(false);
        izdavanje = false;
    }//GEN-LAST:event_rbSellActionPerformed

    private void btnNewOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewOwnerActionPerformed
        IPanel panel = new PnlUnosVlasnika(PanelModeEnum.UNOS);
        panel.dekorisiPanel();
        FrmDialog form = new FrmDialog((Frame) SwingUtilities.getWindowAncestor(this), true, panel);
        form.setVisible(true);
    }//GEN-LAST:event_btnNewOwnerActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Nekretnina nekretnina;
            if (izdavanje == true) {
                nekretnina = (NekretninaZaIzdavanje) preuzmiPolja();
            } else {
                nekretnina = (NekretninaZaProdaju) preuzmiPolja();
            }

            if (mode == PanelModeEnum.IZMENA) {
                nekretnina = Kontroler.getInstance().izmenaNekretnine(nekretnina);
                JOptionPane.showMessageDialog(this, "Uspesno ste izmenili nekretninu");
            } else {
                nekretnina = Kontroler.getInstance().unosNekretnine(nekretnina);
                JOptionPane.showMessageDialog(this, "Uspesno ste sacuvali nekretninu");
            }

            popuniPolja(nekretnina);
            postaviVidljivostPoljima(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnosActionPerformed
        isprazniPolja();
        postaviVidljivostPoljima(true);
    }//GEN-LAST:event_btnUnosActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        SwingUtilities.getWindowAncestor(this).dispose();
        if (mode == PanelModeEnum.IZMENA) {
            (((FrmForma) SwingUtilities.getWindowAncestor((FrmDialog) SwingUtilities.getWindowAncestor(this)))).getPanel().popuniPodatke();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        postaviVidljivostPoljima(true);
        rbRent.setEnabled(false);
        rbSell.setEnabled(false);

        cmbType.setEnabled(false);
        txtRooms.setEditable(false);
        txtSize.setEditable(false);
        txtFloor.setEditable(false);
        txtAdress.setEditable(false);

        if (izdavanje == true) {
            txtPrice.setEditable(false);
            cmbStatus.setEnabled(true);
        }

        cmbCity.setEnabled(false);

    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNewOwner;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUnos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chRegistered;
    private javax.swing.JComboBox<Object> cmbCity;
    private javax.swing.JComboBox<Object> cmbOwner;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JPanel pblCharacteristics;
    private javax.swing.JRadioButton rbRent;
    private javax.swing.JRadioButton rbSell;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextField txtFloor;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtRooms;
    private javax.swing.JTextField txtSize;
    // End of variables declaration//GEN-END:variables
    private void popuniComboVlasnici() {
        cmbOwner.removeAllItems();
        try {
            List<Vlasnik> vlasnici = Kontroler.getInstance().vratiSveVlasnike();
            for (Vlasnik v : vlasnici) {
                cmbOwner.addItem(v);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void popuniComboGradovi() {
        cmbCity.removeAllItems();
        try {
            List<Grad> gradovi = Kontroler.getInstance().vratiSveGradove();
            for (Grad g : gradovi) {
                cmbCity.addItem(g);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void popuniComboTipoviNekretnina() {
        cmbType.removeAllItems();
        for (TipNekretnine tip : TipNekretnine.values()) {
            cmbType.addItem(tip.toString());
        }
    }

    @Override
    public void popuniPolja(OpstaDomenskaKlasa odk) {
        if (odk instanceof NekretninaZaIzdavanje) {
            NekretninaZaIzdavanje nekretnina = (NekretninaZaIzdavanje) odk;
            txtAdress.setText(nekretnina.getAdresa());
            txtDesc.setText(nekretnina.getOpis());
            txtFloor.setText(nekretnina.getSprat() + "");
            txtID.setText(nekretnina.getIdNekretnina() + "");
            txtPrice.setText(nekretnina.getIznosKirije() + "");
            txtRooms.setText(nekretnina.getBrojSoba() + "");
            txtSize.setText(nekretnina.getPovrsina() + "");
            cmbCity.setSelectedItem(nekretnina.getGrad());
            cmbOwner.setSelectedItem(nekretnina.getVlasnik());
            cmbType.setSelectedItem(nekretnina.getTip().toString());
            rbRent.setSelected(true);
            cmbStatus.setSelectedItem(nekretnina.getStatus().toString());
            postaviNekretninuZaIzdavanje(true);
        } else {
            NekretninaZaProdaju nekretnina = (NekretninaZaProdaju) odk;
            txtAdress.setText(nekretnina.getAdresa());
            txtDesc.setText(nekretnina.getOpis());
            txtFloor.setText(nekretnina.getSprat() + "");
            txtID.setText(nekretnina.getIdNekretnina() + "");
            txtPrice.setText(nekretnina.getCena() + "");
            txtRooms.setText(nekretnina.getBrojSoba() + "");
            txtSize.setText(nekretnina.getPovrsina() + "");
            cmbCity.setSelectedItem(nekretnina.getGrad());
            cmbOwner.setSelectedItem(nekretnina.getVlasnik());
            cmbType.setSelectedItem(nekretnina.getTip());
            cmbStatus.setSelectedItem(nekretnina.getStatus().toString());
            chRegistered.setSelected(nekretnina.isUknjizen());
            rbSell.setSelected(true);
            postaviNekretninuZaIzdavanje(false);
        }
    }

    @Override
    public OpstaDomenskaKlasa preuzmiPolja() throws Exception {
        Nekretnina nekretnina;
        if (txtPrice.getText().trim().isEmpty() || txtRooms.getText().trim().isEmpty() || txtSize.getText().trim().isEmpty() || txtAdress.getText().trim().isEmpty() || txtFloor.getText().trim().isEmpty() || txtDesc.getText().trim().isEmpty()) {
            throw new Exception("Morate uneti sva polja");
        }
        BigDecimal cena = new BigDecimal(txtPrice.getText().trim());
        TipNekretnine tip = TipNekretnine.valueOf(cmbType.getSelectedItem().toString());
        double brojSoba = Double.parseDouble(txtRooms.getText().trim());
        double povrsina = Double.parseDouble(txtSize.getText().trim());
        String adresa = txtAdress.getText().trim();
        int sprat = Integer.parseInt(txtFloor.getText().trim());
        String opis = txtDesc.getText().trim();
        StatusNekretnine status = StatusNekretnine.valueOf(cmbStatus.getSelectedItem().toString());
        Vlasnik vlasnik = (Vlasnik) cmbOwner.getSelectedItem();
        Grad grad = (Grad) cmbCity.getSelectedItem();
        if (mode == PanelModeEnum.PRIKAZ) {
            long id = new Long(txtID.getText().trim());

            if (izdavanje == true) {
                nekretnina = new NekretninaZaIzdavanje(cena, id, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
            } else {
                nekretnina = new NekretninaZaProdaju(chRegistered.isSelected(), cena, id, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
            }
        } else {
            if (cena.compareTo(new BigDecimal(0)) == -1 || cena.compareTo(new BigDecimal(0))==0) {
                throw new Exception("Cena mora biti veca od 0");
            }
            if (brojSoba <= 0) {
                throw new Exception("Broj soba mora biti veci od 0");
            }
            if (povrsina <= 0) {
                throw new Exception("Povrsina mora biti veca od 0");
            }
            if (mode == PanelModeEnum.UNOS) {
                if (izdavanje == true) {
                    nekretnina = new NekretninaZaIzdavanje(cena, null, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
                } else {
                    nekretnina = new NekretninaZaProdaju(chRegistered.isSelected(), cena, null, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
                }
            } else {
                long id = new Long(txtID.getText().trim());

                if (izdavanje == true) {
                    nekretnina = new NekretninaZaIzdavanje(cena, id, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
                } else {
                    nekretnina = new NekretninaZaProdaju(chRegistered.isSelected(), cena, id, tip, brojSoba, povrsina, adresa, sprat, opis, vlasnik, grad, status);
                }
            }
        }
        return nekretnina;
    }

    @Override
    public void isprazniPolja() {
        txtAdress.setText("");
        txtDesc.setText("");
        txtFloor.setText("");
        txtID.setText("");
        txtPrice.setText("");
        txtRooms.setText("");
        txtSize.setText("");
        cmbCity.setSelectedIndex(0);
        cmbOwner.setSelectedIndex(0);
        cmbType.setSelectedIndex(0);
        rbRent.setSelected(true);
    }

    @Override
    public void dekorisiPanel() {
        if (mode == PanelModeEnum.IZMENA) {
            btnUnos.setVisible(false);
            btnEdit.setVisible(true);
            btnNewOwner.setVisible(false);
            setBorder(new TitledBorder("Izmena nekretnine"));
        } else if (mode == PanelModeEnum.UNOS) {
            btnUnos.setVisible(true);
            btnEdit.setVisible(false);
            setBorder(new TitledBorder("Unos nekretnine"));
        } else {
            btnCancel.setVisible(false);
            btnEdit.setVisible(false);
            btnNewOwner.setVisible(false);
            btnSave.setVisible(false);
            btnUnos.setVisible(false);
            setBorder(new TitledBorder("Nekretnina"));
            postaviVidljivostPoljima(false);
            rbRent.setVisible(false);
            rbSell.setVisible(false);
        }
    }

    public void postaviNekretninuZaIzdavanje(boolean signal) {
        if (signal == true) {
            rbRent.setSelected(true);
            chRegistered.setVisible(false);
            lblPrice.setText("Mesecna kirija(EUR):");
        } else {
            rbSell.setSelected(false);
            chRegistered.setVisible(true);
            lblPrice.setText("Cena(EUR):");
        }
    }

    @Override
    public void postaviVidljivostPoljima(boolean signal) {
        txtAdress.setEditable(signal);
        txtDesc.setEditable(signal);
        txtFloor.setEditable(signal);
        txtPrice.setEditable(signal);
        txtRooms.setEditable(signal);
        txtSize.setEditable(signal);
        cmbCity.setEnabled(signal);
        cmbOwner.setEnabled(signal);
        cmbType.setEnabled(signal);
        chRegistered.setEnabled(signal);
        rbRent.setEnabled(signal);
        rbSell.setEnabled(signal);
        btnSave.setEnabled(signal);
        if(izdavanje == true)
        cmbStatus.setEnabled(signal);
    }

    private void popuniComboStatusi() {
        cmbStatus.removeAllItems();
        for (StatusNekretnine s : StatusNekretnine.values()) {
            cmbStatus.addItem(s.toString());
        }
        cmbStatus.setSelectedItem(StatusNekretnine.U_PONUDI);
        cmbStatus.setEnabled(false);
    }

    public double vratiCenu() throws Exception {
        if (!txtPrice.getText().trim().equals("")) {
            return Double.parseDouble(txtPrice.getText().trim());
        }
        throw new Exception();
    }

    @Override
    public void popuniPodatke() {
        popuniComboVlasnici();
    }

}
